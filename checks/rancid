from time import localtime, strftime
from os import path

ttl = 90000 # 25 hours
rancid_dir = '/var/lib/rancid'
rancid_db = 'router.db'
rancid_info = { # vendor : { model : (dir, command) }}
    'cisco' : { '7600' : ('cisco-routers', 'cisco'), 'all' : ('cisco-switches', 'cisco')},
    'dlink' : { '3610' : ('dlink-3610', 'dlink-3610') },
    'extreme' : {'all' : ('extreme', 'extreme')},
    'huawei' : { 'all' : ('huawei-olt', 'hw')},
    'nexus' : { 'all' : ('nexus', 'cisco-nx')},
    'juniper' : { 'all' : ('junipers', 'juniper')},
}

def check_rancid(item, _no_params, info):
    ok, crit = (0, 2)
    status = crit
    infostr = ''
    dir, command, item = rancid_vendor(info, item)
    if dir:
        file = "%s/%s/configs/%s" % (rancid_dir,dir,item)

        if os.path.exists(file):
            stat = os.stat(file)
            infostr += "Size: %sB" % stat.st_size
            if not stat.st_size:
                infostr += " (!!)"
            else:
                status = ok
            
            infostr += ", last modified: %s" % strftime("%H:%M:%S %d:%m:%Y",localtime(stat.st_mtime))
            now = time.time();
            if stat.st_mtime < (now - ttl):
                infostr += " (!!) < %s" % strftime("%H:%M:%S %d:%m:%Y", localtime(now - ttl))
            else:
                status = max(status,ok)
        else:
            infostr = "No config file exists: %s" % file 
    else:
        infostr = "Unknown directory for device"

#    print "%d %s" % (status, infostr)
    return (status, infostr)

def rancid_vendor(info, item):
    global g_hostname
    
    info = info[0][0]
    if not item:
        item = g_hostname

    if not item.endswith('.te.net.ua'):
        item += ".te.net.ua"

    if vendors_oid.has_key(info):
        vendor, model = vendors_oid[info]
    else:
        raise MKGeneralException("Unknown vendor for oid %s" % info)

    if rancid_info.has_key(vendor) and \
        (rancid_info[vendor].has_key(model) or rancid_info[vendor].has_key('all')):
       dir, c = rancid_info[vendor][model] \
            if rancid_info[vendor].has_key(model) else rancid_info[vendor]['all']
       return (dir, c, item)
    return None

def inventory_rancid(info):
    inventory = [];
    dir, c, item = rancid_vendor(info, None)   

    if dir:
        file = "%s/%s/%s" % (rancid_dir,dir,rancid_db)

        if os.path.exists(file):
            found = 0;
            f = open (file, 'r+')
            for line in f:
                line.rstrip();
                if line.startswith(item):
                    found = 1
                    break
                
            if not found:
                f.write("%s:%s:up\n" % (item, c))
            
            f.close
            inventory.append((None, None))    
        else:
            raise MKGeneralException("Rancid db file (%s) wasn't found" % file)

    return inventory

check_info['rancid'] = {
    'check_function':   check_rancid,
    'inventory_function':   inventory_rancid,
    'service_description':  'Rancid health',
    'has_perfdata':         False,
    'snmp_scan_function':   lambda oid: oid(".1.3.6.1.2.1.1.2.0") != None,
    'snmp_info':            ('.1.3.6.1.2.1.1.2', ('0')), # vendor oid
    'includes':             ['vendor.include'],
}
