factory_settings["dlink_3610_cpu_default_levels"] = (80,90)

def inventory_dlink_3610_cpu(info):
    return [("cpu", factory_settings["dlink_3610_cpu_default_levels"])]
    
def check_dlink_3610_cpu(item, params, info):
    if info == None:
        return (unknown, "No snmp data", [])
    info = info[0]
    cpu = ("Current","1min","5min")
    ok, warn, crit, unknown = range(4)
    warnLevel,critLevel = params
    state = ok
    perfdata = []
    infostr = ''
    
    for i in range(3):
        info[i] = saveint(info[i])
        if i == 2:
            if info[i] >= critLevel:
                state = crit
                infostr += "%s: %d%% (!!) >= %d" % (cpu[i],info[i],critLevel)
            elif info[i] >= warnLevel:
                state = warn
                infostr += "%s: %d%% (!) >= %d" % (cpu[i],info[i],warnLevel)
            else:
                infostr += "%s: %d%%" % (cpu[i],info[i])
                perfdata.append((cpu[i], info[i], warnLevel, critLevel))
        else:
            infostr += "%s: %s%%; " % (cpu[i],info[i])
            perfdata.append((cpu[i], info[i]))
    
    return (state, infostr, perfdata)

check_info["dlink_3610_cpu"] = {
    'check_function':           check_dlink_3610_cpu,
    'inventory_function':       inventory_dlink_3610_cpu,
    'service_description':      'CPU load',
    'has_perfdata':             True,
    'snmp_info':                ( ".1.3.6.1.4.1.171.10.97.2.36.1.1", [ "1.0","2.0","3.0" ]), 
    'snmp_scan_function':       lambda oid: oid(".1.3.6.1.4.1.171.10.97.2.36.1.1.1.0") != None,
}
