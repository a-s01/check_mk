#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# oid(".1.3.6.1.4.1.9.9.109.1.1.1.1.5.1") is depreceated by
# oid(".1.3.6.1.4.1.9.9.109.1.1.1.1.8.1"), we recognize both for now

extreme_cpu_default_levels = (80.0, 90.0)

def check_extreme_cpu(item, params, info):
    for i in range(len(info[0])):
        info[0][i] = float(info[0][i])

    util, util1, util5 = info[0]
    infotext = "%2.1f%% utilization in the last 5 minutes" % util5
    warn, crit = params
    perfdata = [("5min util", util5, warn, crit, 0, 100),
                ("1min util", util1, warn, crit, 0, 100),
                ("current util", util, warn, crit, 0, 100),
            ]
    if util >= crit:
        return (2, infotext + " (critical at %d%%)" % crit, perfdata)
    elif util >= warn:
        return (1, infotext + " (warning at %d%%)" % warn, perfdata)
    else:
        return (0, infotext, perfdata)

check_info["extreme_cpu"] = {
    "check_function"        : check_extreme_cpu,
    "inventory_function"    : lambda info: [(None, "extreme_cpu_default_levels")],
    "service_description"   : "CPU utilization",
    "has_perfdata"          : True,
    "group"                 : "cpu_utilization",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.4.1.1916.1.32.1.4.1.5.1") \
                                  or oid(".1.3.6.1.4.1.1916.1.32.1.4.1.8.1") \
                                  or oid(".1.3.6.1.4.1.1916.1.32.1.4.1.9.1"),
    "snmp_info"		    : ( ".1.3.6.1.4.1.1916.1.32.1.4.1", [ '5.1', '8.1', '9.1' ]),
}

