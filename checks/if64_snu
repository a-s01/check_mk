#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
import re
import pprint

if_inventory_porttypes = [ '6', '32', '53', '62', '117' ]
if_inventory_uses_description = True
if64_snu_porttypes_filter = { 
        '53': ('^Po','^Ag','^vcp'),
}

def fix_if64_snu_highspeed(info):
    for line in info:
        if type(line[3]) == str: # not yet converted
            line[3] = saveint(line[3]) * 1000000


def inventory_if64_snu(info):
    # Fix for switches like DLINK, with empty lines in MIB
    info = [ x for x in info if saveint(x[0]) > 0 ] 
    fix_if64_snu_highspeed(info)

    # add a null value as ifPhysAddress
    for line in info:
        line.append('')

    if if64_snu_porttypes_filter:
#        pre_inventory = inventory_if_common(info, has_nodeinfo = True, type_required = True)
        pre_inventory = inventory_if_common(info, type_required = True)
        inventory = []

        for ifType in pre_inventory:
            if if64_snu_porttypes_filter.has_key(ifType):
                passed_filter = []

                for line in pre_inventory[ifType]:
                    for pattern in if64_snu_porttypes_filter[ifType]:
                        if re.match(pattern,line[0]):
                            passed_filter.append(line)
                            break
                        
                inventory.extend(passed_filter)
            else:
                inventory.extend(pre_inventory[ifType])
        return inventory
    else:
#        return(inventory_if_common(info, has_nodeinfo = True))
        return(inventory_if_common(info))

    return []

def check_if64_snu(item, params, info):
    fix_if64_snu_highspeed(info)
    # add a null value as ifPhysAddress
    if len(info[0]) != 20:
        for line in info:
            line.append('')

    return check_if_common(item, params, info)


def if64_snu_scan_function(oid):
#    return False

    ignored_strings = [
    "LANCOM",
    ]
    for string in ignored_strings:
        if string in oid(".1.3.6.1.2.1.1.1.0"):
            return False

    if ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0"):
        return False

#    if if64_disabled(g_hostname):
#        return False

    if oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None:
        return True

    return False



check_info["if64_snu"] = {
    'check_function':          check_if64_snu,
    'inventory_function':      inventory_if64_snu,
    'service_description':     'Interface %s',
    'has_perfdata':            True,
    'includes':                [ 'if.include' ],
    'snmp_info':               ( ".1.3.6.1.2.1", [
        "2.2.1.1",     # ifIndex                   0
        "31.1.1.1.1",  # ifName                    1    # replacement for ifDescr 
        "2.2.1.3",     # ifType                    2
        "31.1.1.1.15", # ifHighSpeed               .. 1000 means 1GBit
        "2.2.1.8",     # ifOperStatus              4
        "31.1.1.1.6",  # ifHCInOctets              5
        "31.1.1.1.7",  # ifHCInUcastPkts           6
        "31.1.1.1.8",  # ifHCInMulticastPkts       7
        "31.1.1.1.9",  # ifHCInBroadcastPkts       8
        "2.2.1.13",    # ifInDiscards              9
        "2.2.1.14",    # ifInErrors               10
        "31.1.1.1.10", # ifHCOutOctets            11
        "31.1.1.1.11", # ifHCOutUcastPkts         12
        "31.1.1.1.12", # ifHCOutMulticastPkts     13
        "31.1.1.1.13", # ifHCOutBroadcastPkts     14
        "2.2.1.19",    # ifOutDiscards            15
        "2.2.1.20",    # ifOutErrors              16
        "2.2.1.21",    # ifOutQLen                17
        "31.1.1.1.18", # ifAlias                  18
    ]),
    'snmp_scan_function'        : if64_snu_scan_function,
    'group'                     : 'if',
    'default_levels_variable'   : 'if_default_levels',
}
