--- if.include	2014-09-16 13:56:24.632002222 +0300
+++ iftest.include	2014-09-18 17:59:42.856002315 +0300
@@ -25,6 +25,7 @@
 # Boston, MA 02110-1301 USA.
 
 # Functions and definitions used by if and if64
+import re
 
 if_inventory_porttypes = [ '6', '32', '62', '117' ]
 if_inventory_portstates = [ '1' ]
@@ -42,12 +43,20 @@
 
 
 # Grouping of if ports
+if_groups_test = [
+        ([{"name" : "Te1/%4"}], ['cat01-co-ch2a']),
+        ([{"name" : "Te5/1-4", "single" : True,}], ['cat01-co-ch2a']),
+]
 #if_groups = [
 #   ( [{"name" : "VLAN", "iftype" : 53, "single" : True}], [ ], ALL_HOSTS ),
+#   ( [{"name" : "Te1/0-4", "iftype" : 53, "single" : True, "interfaces": "Te1/0-4"_}], [ ], ALL_HOSTS ),
+#   ( [{"name" : "Te1/0-4", "iftype" : 53, "single" : True, "interfaces": "Te1/0-Te2/4"_}], [ ], ALL_HOSTS ),
+#   ( [{"name" : "Te1/*, "iftype" : 53, "single" : True, "interfaces": "Te1/*"_}], [ ], ALL_HOSTS ),
+#   ( [{"name" : "Te1/%4, "iftype" : 53, "single" : True, "interfaces": "Te1/%4"_}], [ ], ALL_HOSTS ), #группировать пачками по 4
 #   ( [{"name" : "Group WLAN", "iftype" : 6, "single" : True}], [ "lan" ], ALL_HOSTS )
 #   ]
 #
-if_groups = []
+#if_groups = []
 
 # Obsolete variable, but needed as contained in autochecks of
 # older checks. We need to keep this up for a few years...
@@ -57,7 +66,7 @@
 
 if_disable_if64_hosts = [] # Binary host list for disabling if64 on some broken devices
 
-def if64_disabled(hostname):
+def if64_disabled_test(hostname):
     return in_binary_hostlist(hostname, if_disable_if64_hosts)
 
 # Remove 0 bytes from strings. They lead to problems e.g. here:
@@ -66,7 +75,7 @@
 # 0 byte. When this string is part of the data which is sent to
 # the nagios pipe all chars after the 0 byte are stripped of.
 # Stupid fix: Remove all 0 bytes. Hope this causes no problems.
-def cleanup_if_strings(s):
+def cleanup_if_strings_test(s):
     if s and s != '':
         return "".join([ c for c in s if c not in nagios_illegal_chars+chr(0) ]).strip()
     else:
@@ -76,17 +85,97 @@
 check_config_variables.append("nagios_illegal_chars")
 
 # Name of state (lookup SNMP enum)
-def if_statename(st):
+def if_statename_test(st):
     names = { '1': 'up',      '2': 'down',
               '3': 'testing', '4': 'unknown',
               '5': 'dormant', '6': 'notPresent',
               '7': 'lowerLayerDown' }
     return names.get(st, st)
 
+def if_parse_slotPort(item):
+    result = []
+    if item != None:
+        k = re.search("([A-Za-z]*)(\d*)([:/])*(\d*)", item)
+        if k:
+            for x in k.groups():
+                result.append(x)
+#            print "if_parse_slotPort: %s" % item
+#            pprint.pprint(k)
+            if result[2] == None:
+                result[3] = result[1]
+                result[1] = ''
+        else:
+            result = [None] * 4
+
+    return dict(zip(('pref','slot','div','port'),result))
+
+def if_parse_intName (item, rule):
+    parsedItem = if_parse_slotPort(item)
+    group = re.search(r'^(.*[^\\])-(.*)$', rule)
+
+    if re.search(r'^Te5555/', item):
+        print "if_parse_intName: %s, %s" % (item, rule)
+
+    if group:
+        group = group.groups()
+        if len(group) == 0:
+            return False
+        first = if_parse_slotPort(group[0]) 
+        last = if_parse_slotPort(group[1]) 
+
+        for thing in ('pref', 'slot'):
+            if last[thing] == '':
+                last[thing] = first[thing]
+
+        for thing in [ 'slot', 'port']:
+            parsedItem[thing] = saveint(parsedItem[thing])
+            first[thing] = saveint(first[thing])
+            last[thing] = saveint(last[thing])
+
+        if first['pref'] != last['pref']:
+                print "Bad rule: prefixes don't match in first and last part"
+                return False
+
+        if first['pref'] != parsedItem['pref']:
+            return False
+
+        if re.search(r'^Te5555/', item):
+            print "if_parse_intName: item %s" % item
+            print "first"
+            pprint.pprint(first)
+            print "last"
+            pprint.pprint(last)
+            print "parsedItem"
+            pprint.pprint(parsedItem)
+        if first['slot'] <= parsedItem['slot'] <= last['slot']:
+            if first['slot'] == last['slot']:
+                if first['port'] <= parsedItem['port'] <= last['port']:
+#                    print "if_parse_intName: 1: %s <= %s <= %s" % (first['port'], parsedItem['port'], last['port'])
+                    return True
+            else:
+                if parsedItem['slot'] == first['slot']:
+                    if first['port'] <= parsedItem['port']:
+#                        print "if_parse_intName: 2: %s <= %s" % (first['port'], parsedItem['port'])
+                        return True
+                elif parsedItem['slot'] == last['slot']:
+                    if parsedItem['port'] <= last['port']:
+#                        print "if_parse_intName: 3: %s <= %s" % (parsedItem['port'], last['port'])
+                        return True
+                else:
+#                    print "if_parse_intName: slot in the middle"
+                    return True
+        else:
+            return False
+
+    elif re.search(rule, item): # for not-special regular expresions
+#        print "if_parse_intName: non-special"
+        return True
+
+    return False
 
 # Pads port numbers with zeroes, so that items
 # nicely sort alphabetically
-def if_pad_with_zeroes(info, ifIndex):
+def if_pad_with_zeroes_test(info, ifIndex):
     if if_inventory_pad_portnumbers:
         max_index = max([int(line[0]) for line in info])
         digits = len(str(max_index))
@@ -95,7 +184,7 @@
         return ifIndex
 
 
-def inventory_if_common(info, type_required = False):
+def inventory_if_common_test(info, type_required = False):
     if len(info) == 0 or len(info[0]) != 20:
         return []
 
@@ -104,21 +193,72 @@
     uses_alias          = settings.get('use_alias', if_inventory_uses_alias)
     porttypes           = settings.get('porttypes', if_inventory_porttypes)
     portstates          = settings.get('portstates', if_inventory_portstates)
+    ifNamePos = 1
 
     pre_inventory        = []
     pre_inventory_groups = []
     group_patterns = {}
 
-    for line in host_extra_conf(g_hostname, if_groups):
+    for line in host_extra_conf(g_hostname, if_groups_test):
         for entry in line:
-            if str(entry["iftype"]) in porttypes:
+            groups = re.search(r'^(.*[^\\])%(.*$)', entry["name"])
+            if groups != None:
+                groups = groups.groups();
+                portPtrn, step = groups
+        #        print "Pat: %s, step: %s" % (portPtrn, step)
+                portParsed = if_parse_slotPort(portPtrn)
+                step = saveint(step) - 1
+                port = None
+                minPort, maxPort = (1, 0)
+
+                if portParsed['div'] == '':
+                    if portParsed['slot'] != '':
+                        portPtrn = "%s%s" % (portParsed['pref'], portParsed['slot'])
+                        port = portParsed['slot']
+                        minPort = portParsed['slot']
+
+                elif portParsed['port'] != '':
+                    portPtrn = "%s%s%s" % (portParsed['pref'], portParsed['slot'], portParsed['div'])
+                    port = portParsed['port']
+                    minPort = port
+
+         #       print "After: %s, %d" % (portPtrn, step)
+                for line in info:
+                    groups = re.search(r'^%s(\d+)[/:]*\d*$' % portPtrn, line[ifNamePos])
+                    if groups != None:
+                        groups = groups.groups()
+                        this_port = saveint(groups[0])
+          #              print "thisport = %d" % this_port
+                        if portParsed['port'] != None:
+                            if this_port > port:
+                                maxPort = max(maxPort,this_port)
+                        else:
+                            maxPort = max(maxPort,this_port)                        
+                            minPort = min(minPort,this_port)
+
+           #     print "Min %s, max %s" % (minPort,maxPort)
+                if minPort == maxPort:
+                    continue
+
+                minPort = saveint(minPort)
+                maxPort = saveint(maxPort) + 1
+                while minPort + step < maxPort:
+                    entry_name = "%s%d-" % (portPtrn, minPort)
+                    minPort += step
+                    entry_name += "%d" % minPort
+                    minPort += 1
+                    group_patterns[entry_name] = entry.copy()
+                    group_patterns[entry_name]['interfaces'] = entry_name
+            else:
                 group_patterns[entry["name"]] = entry
+                if re.search(r'^.*[^\\]-.', entry["name"]):
+                    group_patterns[entry["name"]]["interfaces"] = entry["name"]
 
     seen_items  = set([])
     duplicate   = set([])
     have_groups = {}
 
-
+#    pprint.pprint(group_patterns)
     # Determine whether single, grouped or both
     for ifIndex, ifDescr, ifType, ifSpeed, ifOperStatus, ifInOctets, \
             inucast, inmcast, inbcast, ifInDiscards, ifInErrors, ifOutOctets, \
@@ -139,16 +279,37 @@
             item = ifAlias
         else:
             item = if_pad_with_zeroes(info, ifIndex)
+        
+        def myAddToGroup(group_name, pattern):
+            is_only_in_group = False
+            if not group_name in have_groups.keys():
+                have_groups[group_name] = {"interfaces": []}
+            have_groups[group_name]["interfaces"].append((saveint(ifSpeed), ifOperStatus))
+            if "iftype" in pattern:
+                have_groups[group_name]["iftype"] = pattern["iftype"]
+            if pattern.get("single") and pattern["single"] == True:
+                is_only_in_group = True
+
+            return is_only_in_group
 
         # Prepare grouped interfaces
         is_only_in_group = False
         for group_name, pattern in group_patterns.items():
-            if pattern["iftype"] == saveint(ifType):
-                have_groups.setdefault(group_name, {"interfaces": []})["iftype"] = pattern["iftype"]
-                have_groups[group_name]["interfaces"].append((saveint(ifSpeed), ifOperStatus))
-                if pattern.get("single"):
-                    is_only_in_group = True
+            if re.search(r'^Te111', item):
+                print "====\nCheck group: %s, item: %s, pat:" % (group_name, item)
+                pprint.pprint(pattern)
+            if "iftype" in pattern and "interfaces" in pattern:
+                if pattern["iftype"] == saveint(ifType) and if_parse_intName(item, pattern["interfaces"]):
+                    is_only_in_group = myAddToGroup(group_name, pattern)
+            elif "iftype" in pattern:
+                if pattern["iftype"] == saveint(ifType):
+                    is_only_in_group = myAddToGroup(group_name, pattern)
+            elif "interfaces" in pattern:
+                if if_parse_intName(item, pattern["interfaces"]):
+                #    print "%s in %s" % (item, pattern["interfaces"])
+                    is_only_in_group = myAddToGroup(group_name, pattern)
 
+#        print "Item is only in group: %s %s" % (item, is_only_in_group)
         # Prepare single interfaces
         if not is_only_in_group:
             if item in seen_items: # duplicate
@@ -167,6 +328,8 @@
                     params["speed"] = int(ifSpeed)
                 pre_inventory.append( (item, "%r" % params, int(ifIndex)) )
 
+#    pprint.pprint(have_groups)
+
     # create pseudo interfaces out of groups
     for group_name, values in have_groups.items():
         # total maximum speed of all interfaces in this group
@@ -176,15 +339,18 @@
         one_up = "1" in [pair[1] for pair in values["interfaces"]]
         group_operStatus = one_up and "1" or "2"
 
-        ifType = group_patterns[group_name]["iftype"]
-        if str(ifType) in porttypes and group_operStatus in portstates:
-            params = { "iftype": ifType, "aggregate": True }
-            if if_inventory_monitor_state:
-                params["state"] = [ group_operStatus ]
-
-            if ifSpeed != "" and if_inventory_monitor_speed:
-                params["speed"] = total_speed
-            pre_inventory.append( (group_name, "%r" % params, int(ifIndex)) )
+        params = {"aggregate": True}
+        if "iftype" in group_patterns[group_name].keys():
+            ifType = group_patterns[group_name]["iftype"]
+            if str(ifType) in porttypes and group_operStatus in portstates:
+                params["iftype"] = ifType
+
+        if if_inventory_monitor_state:
+            params["state"] = [ group_operStatus ]
+
+        if ifSpeed != "" and if_inventory_monitor_speed:
+            params["speed"] = total_speed
+        pre_inventory.append( (group_name, "%r" % params, int(ifIndex)) )
 
     if type_required:
         inventory = {}
@@ -215,14 +381,26 @@
 
     return inventory
 
-def check_if_common(item, params, info):
+def check_if_common_test(item, params, info):
 #    pprint.pprint(info)
     # If this item is in an ifgroup create a pseudo interface and pass its data to the common instance
     # This is done by simply adding the additional group_info data to the already existing info table
     if params.get("aggregate"):
         matching_interfaces = []
+        if re.search(r'[^\\]-',item):
+            match_int = True
         for element in info:
-            if params["iftype"] == saveint(element[2]):
+            good_name = True
+            if match_int:
+                if not if_parse_intName(element[1],item):
+                    good_name = False
+
+            good_iftype = True
+            if "iftype" in params:
+                if params["iftype"] != saveint(element[2]):
+                    good_iftype = False
+
+            if good_name and good_iftype:
                 matching_interfaces.append(element)
 
         # Accumulate info over matching_interfaces
@@ -293,10 +471,14 @@
         one_up = "1" in [element[4] for element in matching_interfaces]
         group_operStatus = one_up and "1" or "2"
 
+        if "iftype" in params:
+            group_iftype = params["iftype"]
+        else:
+            group_iftype = 'unknown'
         group_entry = [
                     "ifgroup%s" % item,         # ifIndex
                     item,                       # ifDescr
-                    params["iftype"],           # ifType
+                    group_iftype,           # ifType
                     group_info["ifSpeed"],      # ifSpeed
                     group_operStatus,           # ifOperStatus
                     group_info["ifInOctets"],   # ifInOctets
@@ -313,18 +495,21 @@
                     group_info["ifOutDiscards"],# ifOutDiscards
                     group_info["ifOutErrors"],  # ifOutErrors
                     group_info["ifOutQLen"],    # ifOutQLen
-                    "iftype %s" % params["iftype"],        # ifAlias
+                    item,                       # ifAlias
+#                    "iftype %s" % params["iftype"],        # ifAlias
                     "",                         # ifPhysAddress
         ]
         info.append(group_entry)
+        print "Group entry"
+        pprint.pprint(group_entry)
         # If applicable, signal the check_if_common_single if the counter of the
         # given interface has wrapped. Actually a wrap of the if group itself is unlikely,
         # however any counter wrap of one of its members causes the accumulation being invalid
-        return check_if_common_single(item, params, info, wrapped)
+        return check_if_common_single_test(item, params, info, wrapped)
 
-    return check_if_common_single(item, params,info)
+    return check_if_common_single_test(item, params,info)
 
-def check_if_common_single(item, params, info, force_counter_wrap = False):
+def check_if_common_single_test(item, params, info, force_counter_wrap = False):
     global g_counters
     # Params now must be a dict. Some keys might
     # be set to None
@@ -336,7 +521,6 @@
     unit               = params.get("unit") in ["Bit", "bit"] and "Bit" or "B"
     unit_multiplier    = unit == "Bit" and 8.0 or 1.0
     tr_excess_period_warn, tr_excess_perion_crit = params["traffic_excess_period"]
-#    print "tr_excess_period_warn = %d, tr_excess_perion_crit = %d" % (tr_excess_period_warn, tr_excess_perion_crit)
 
     # error checking might be turned off
     if params["errors"]:
@@ -497,6 +681,7 @@
                 ( "outerr",    ifOutErrors, err_warn, err_crit, None, None) ]:
 
                 try:
+                    print "Counter %s is %s" %(name,counter)
                     timedif, rate = get_counter("if.%s.%s" % (name, item), this_time, saveint(counter))
                     if force_counter_wrap:
                         raise MKCounterWrapped("if.%s.%s" % (name, item), "Forced counter wrap")
@@ -543,7 +728,7 @@
                         perfdata.append( ("%s_avg_%d" % (what, average), traffic_avg, bw_warn, bw_crit, 0, speed) )
                         traffic = traffic_avg # apply levels to average traffic
 
-                    def check_tr_excess_event(excess_count, countername, old_state, new_state, infotext, new_infotext):
+                    def check_tr_excess_event_test(excess_count, countername, old_state, new_state, infotext, new_infotext):
                         if excess_count:
                             if not countername in g_counters:
                                 g_counters[countername] = (this_time, 1)
@@ -559,12 +744,11 @@
                             return (new_state, infotext + new_infotext)
 
                         return (old_state, infotext)
-    
                         
                     # Check bandwidth thresholds
                     countername_base = "if.%s.%s" % (what, ifAlias)
                     if bw_crit != None and traffic >= bw_crit:
-                        state, infotext = check_tr_excess_event(tr_excess_perion_crit, "%s.%s" % (countername_base, "crit"), state, 2, infotext, ' (!!) >= ' + format_value(bw_crit))
+                        state, infotext = check_tr_excess_event(tr_excess_period_crit, "%s.%s" % (countername_base, "crit"), state, 2, infotext, ' (!!) >= ' + format_value(bw_crit))
 
                     elif bw_warn != None and traffic >= bw_warn:
                             state, infotext = check_tr_excess_event(tr_excess_period_warn, "%s.%s" % (countername_base, "warn"), state, max(state,1), infotext, ' (!) >= ' + format_value(bw_warn))
