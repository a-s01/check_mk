#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# author of this check: Alena Solodiankina <alena.vladimirovna@gmail.com>
# Type can be:
sensor_types = {    '3': 'VAC', 
                    '4': "V", 
                    '5': "A", 
                    '6': "W", 
                    '7': "H", 
                    '8': "C", 
                    '9': "%", 
                    '10': 'rpm', 
                    '11': 'cmm', 
                    '14': 'dBm' 
}
sensor_scale = {    
                '1': 'y', #yocto
	        '2': 'z', #zepto
	        '3': 'a', #atto
	        '4': 'f', #femto
	        '5': 'p', #pico
	        '6': 'n', #nano
	        '7': 'micro',
	        '8': 'm', #milli
	        '10': 'k', #kilo
	        '11': 'M', #mega
	        '12': 'G', #giga
	        '13': 'T', #tera
	        '14': 'E', #exa
	        '15': 'P', #peta
	        '16': 'Z', #zetta
	        '17': 'Y', #yotta
}

cisco_sensor_monitored_types = ["3", "4", "5", "6", "8", "14"]
use_cisco_thresholds = False # dirty performance hack: if you'll use cisco thresholds uncomment threshold oid in the end of file
cisco_sensor_defaults = { 'receive power': { 'low': (2,3) , 'high': (3,4) },
}

def value_conversion(value, scale, precision):
    if value == None:
        return value

    if scale:
        if isinstance(scale, float):
            value = float(value)*scale
        elif isinstance(scale, int):
            value = value*scale

    if precision:
        if isinstance(precision, float):
            value = float(value)*precision
        else:
            value = value*precision

    return value

def check_cisco_sensor(item, params, info):
    pre_inventory = parse_entity_info(info)
    ok, warn, crit, unknown = range(4)

    infostr = ''
    item_status = ok
    perfdata = []

    for container, sensor, state, sensor_type, scale, precision, value, thresholds in pre_inventory:
        if container != item:
            continue

        infostr += "%s" % sensor
        if state != '1':
            item_status = crit
            value = { '2': "unavailable", '3': "nonoperational" }
            infostr += ": %s;" % value[state]
            continue

        if precision:
            precision = 10**(-saveint(precision))
        
        units = ''
        if sensor_scale.has_key(scale):
            scale = sensor_scale[scale]
            if not isinstance(scale, (float, int)):
                units += "%s" % scale
        else:
            scale = None
        value = value_conversion(saveint(value), scale, precision)

        if params != None and params.has_key(sensor) and not use_cisco_thresholds:
            standart = value_conversion(saveint(params.get(sensor)),scale,precision)
            newThresh = cisco_sensor_defaults.get(sensor)
            thresholds = []
            for key in newThresh:
                for v in newThresh[key]:
                    if key == 'high':
                        thresholds.append(standart + v)
                    if key == 'low':
                        if thresholds == None:
                            thresholds = [ None, None]
                        thresholds.append(standart - v)

        else:
            if thresholds != None:
                for i,v in enumerate(thresholds):
                    thresholds[i] = value_conversion(v,scale,precision)

#        perfdata_name = sensor.replace(" ", "_")
        perfdata_name = sensor

        if sensor_types.has_key(sensor_type):
            units +="%s" % sensor_types[sensor_type]
            perfdata_name += "-%s" % units
       
        if (isinstance(value, float)):
            infostr += ": %.2f%s" % (value, units)
        else:
            infostr += ": %d%s" % (value, units)

        if thresholds == None:
            infostr += "; "
            perfdata.append((perfdata_name, value))
            continue

        flag = 0
        
        if len(thresholds) == 4:
            warn_max, crit_max, warn_min, crit_min = thresholds
            if value <= crit_min:
                item_status = max(crit,item_status)
                infostr += " (!!) <= %.2f" % crit_min
                flag = 1
            elif value <= warn_min:
                item_status = max(warn,item_status)
                infostr += " (!) <= %.2f" % warn_min
                flag = 1

            perfdata.append((perfdata_name, value))
        else:
            warn_max, crit_max = thresholds
            perfdata.append((perfdata_name, value, warn_max, crit_max))

        if flag == 0:
            if value >= crit_max:
                item_status = max(crit,item_status)
                infostr += " (!!) >= %.2f" % crit_max
            elif value >= warn_max:
                item_status = max(warn,item_status)
                infostr += " (!) >= %.2f" % warn_max

        infostr += "; "


    if infostr == '':
        infostr = "UNKNOWN - sensor info not found in SNMP data"
        item_status = unknown

    return (item_status, infostr, perfdata)

def parse_entity_info(info):
    pre_inventory = []
    names = {}
    if use_cisco_thresholds:
        thresholds = {}
        sensor_info,name_info,threshold_info = info

        for endoid, level in threshold_info:
            id, subid = endoid.split('.')
            thresholds.setdefault(id, []).append(saveint(level))
    else:
        sensor_info,name_info = info

    names = dict(name_info)
    for line in sensor_info:
        id, type, scale, precision, value, state = line

        if type not in cisco_sensor_monitored_types \
            or names[id] == '':
            continue

        sensor_names = names[id].split()
        item = sensor_names.pop(0)

        if sensor_names[0].isdigit():
            item += sensor_names.pop(0)

        if sensor_names[-1] == 'Sensor':
            sensor_names.pop(-1)
        sensor_name = " ".join(sensor_names).lower()

        if use_cisco_thresholds:
            pre_inventory.append((item, sensor_name, state, type, scale, precision, value, thresholds.get(id, None)))
        else:
            pre_inventory.append((item, sensor_name, state, type, scale, precision, value, None))
            
    return pre_inventory

def inventory_cisco_sensor(info):
    pre_inventory = parse_entity_info(info)
    items = []
    item_params = {}
    inventory = []

    if use_cisco_thresholds:
        return [ (entry[0], None) for entry
            in pre_inventory if entry[2] == '1' ]
 
    for entry  in pre_inventory:
        item, sensor_name, state = entry[:3]
        value = entry[6]
        if state == '1':
            if cisco_sensor_defaults.get(sensor_name):
                if not item_params.has_key(item):
                    item_params[item] = {}
                item_params[item].update({sensor_name: value})
            
            if item not in items:
                items.append(item)

    for item in items:
        if item_params.has_key(item):
            inventory.append((item, item_params[item]))
        else:
            inventory.append((item,None))

    return inventory

check_info["cisco_sensor"] = {
    'check_function':           check_cisco_sensor,
    'inventory_function':       inventory_cisco_sensor,
    'service_description':      'Sensor info for %s',
    'has_perfdata':             True,
    'snmp_scan_function':       lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
                                    oid(".1.3.6.1.4.1.9.9.91.1.1.1.1.*") != None,
    'snmp_info':                [ ( ".1.3.6.1.4.1.9.9.91.1.1.1.1", [
                                        OID_END,
                                        "1", # Type
                                        "2", # Sensor scale
                                        "3", # Sensor precision
                                        "4", # Most recent measurement
                                        "5", # Status of the sensor 1 == ok, 2 == cannot report, 3 == broken
                                    ]),
                                  ( ".1.3.6.1.2.1.47.1.1.1.1", [ 
                                        OID_END, 
                                        "7", # entPhysicalName
                                    ]),
#### Uncomment this if you want use cisco built-in thresholds ###
#                                  ( ".1.3.6.1.4.1.9.9.91.1.2.1.1", [
#                                      OID_END,
#                                      4, # Thresholds
#                                    ]),
### end ###
                                ],
}
