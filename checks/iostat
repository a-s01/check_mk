iostat_levels = (80, 90)

def parse_iostat(info):
    inventory = []
    mark = 0

    for line in info:
        if line[0] == 'Device:':
            mark = 1
            continue

        if mark:
            inventory.append((str(line[0]), float(line[3]), float(line[4]), float(line[13]))) 
		# disk, read, write, util
                
    return inventory

def inventory_iostat(info):
    parsed = parse_iostat(info)
    inventory = []

    for line in parsed:
	inventory.append((line[0], iostat_levels))
    return inventory

def check_iostat(item, params, info):
    ok, warn, crit, unknown = range(4)
    infostr = 'Item wasn\'t found'
    status = unknown
    perfdata = []
    warnlvl, critlvl = params

    parsed = parse_iostat(info)

    for line in parsed:
	if line[0] == item:
	    read, write, util = line[1:]
	    infostr = "Read/s %.2f , write/s %.2f, util %.2f%%" % (read, write, util)
	    perfdata = [('read/s', read), ('write/s', write), ('util', util, warnlvl, critlvl)]
	    if util >= critlvl:
		infostr += "(!!) (>=%d)" % critlvl
		status = crit
	    elif util >= warnlvl:
		infostr += "(!) (>=%d)" % warnlvl
	    else:
		status = ok

	    break
    return (status, infostr, perfdata)

check_info['iostat'] = { 
    "check_function"          : check_iostat,
    "inventory_function"      : inventory_iostat,
    "service_description"     : "Iostat for %s",
    "has_perfdata"            : True,
}
